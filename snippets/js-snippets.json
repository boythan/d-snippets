{
  "reactFunctionalExportComponent": {
    "prefix": "rfce",
    "body": [
      "import React from 'react'",
      "",
      "function ${1:${TM_FILENAME_BASE}}() {",
      "\treturn (",
      "\t\t<div>",
      "\t\t\t$0",
      "\t\t</div>",
      "\t)",
      "}",
      "",
      "export default ${1:${TM_FILENAME_BASE}}",
      ""
    ],
    "description": "Creates a React Functional Component with ES7 module system"
  },
  "reactArrowFunctionComponent": {
    "prefix": "rafc",
    "body": [
      "import React from 'react'",
      "",
      "export const ${1:${TM_FILENAME_BASE}} = () => {",
      "\treturn (",
      "\t\t<div>",
      "\t\t\t$0",
      "\t\t</div>",
      "\t)",
      "}",
      ""
    ],
    "description": "Creates a React Arrow Function Component with ES7 module system"
  },
  "reactNativeFunctionalComponent": {
    "prefix": "rnf",
    "body": [
      "import React from 'react'",
      "import { View, Text } from 'react-native'",
      "",
      "export default function ${1:${TM_FILENAME_BASE}}() {",
      "\treturn (",
      "\t\t<View>",
      "\t\t\t<Text>$0</Text>",
      "\t\t</View>",
      "\t)",
      "}",
      ""
    ]
  },
  "reactNativeFunctionalComponentWithStyles": {
    "prefix": "rnfs",
    "body": [
      "import React from 'react'",
      "import { StyleSheet, Text, View } from 'react-native'",
      "",
      "export default function ${1:${TM_FILENAME_BASE}}() {",
      "\treturn (",
      "\t\t<View>",
      "\t\t\t<Text>$0</Text>",
      "\t\t</View>",
      "\t)",
      "}",
      "",
      "const styles = StyleSheet.create({})",
      ""
    ]
  },

  "formikHook": {
    "prefix": "useFormik",
    "body": [
      "const ${1:form} = useFormik({",
      "\tinitialValues: {}",
      "\tvalidateOnChange: false,",
      "\tvalidateOnBlur: false,",
      "\tvalidationSchema: ${2:schema},",
      "\tonSubmit: (values) => {},",
      "/>"
    ],
    "description": "Creates useFormik "
  },

  "graphQLQuery": {
    "prefix": "gqlquery",
    "body": [
      "${1:queryFuncName}: (${2: params}) =>",
      "\tAPI.query({",
      "\t\tquery: gql`",
      "\t\t\tquery ${3:queryName}($${4:queryParam}:${5:queryParamType}) {",
      "\t\t\t\t${3:queryName}(${4:queryParam}: $${4:queryParam}) {",
      "\t\t\t\t\t$6",
      "\t\t\t\t}",
      "\t\t\t}",
      "\t\t`,",
      "\t\tvariables: { ${2: params} }",
      "\t}),"
    ]
  },

  "graphQLMutation": {
    "prefix": "gqlmutate",
    "body": [
      "${1:mutationFuncName}: (${2: params}) =>",
      "\tAPI.mutate({",
      "\tmutation: gql`",
      "\t\tmutation ${3:mutationName}($${4:param}:${5:paramType}) {",
      "\t\t\t\t${43:mutationName}(${4:param}: $${4:param}) {",
      "\t\t\t\t\t$5",
      "\t\t\t\t}",
      "\t\t\t}",
      "\t\t`,",
      "\t\tvariables: { ${2: params} }",
      "\t}),"
    ]
  },

  "graphQLDelete": {
    "prefix": "gqldelete",
    "body": ["delete: (id) => API.delete('$1', id),"]
  }
}
