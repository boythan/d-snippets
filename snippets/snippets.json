{
  "import": {
    "prefix": "imp",
    "body": "import ${2:moduleName} from '${1:module}'$0"
  },
  "importNoModuleName": {
    "prefix": "imn",
    "body": "import '${1:module}'$0"
  },
  "importDestructing": {
    "prefix": "imd",
    "body": "import { $2 } from '${1:module}'$0"
  },
  "importEverything": {
    "prefix": "ime",
    "body": "import * as ${2:alias} from '${1:module}'$0"
  },
  "importAs": {
    "prefix": "ima",
    "body": "import { ${2:originalName} as ${3:alias} } from '${1:module}'$0"
  },

  "exportDefault": {
    "prefix": "exp",
    "body": "export default $1$0"
  },
  "exportDestructing": {
    "prefix": "exd",
    "body": "export { $2 } from '${1:module}'$0"
  },
  "exportAs": {
    "prefix": "exa",
    "body": "export { ${2:originalName} as ${3:alias} } from '${1:module}'$0"
  },
  "exportNamedFunction": {
    "prefix": "enf",
    "body": [
      "export const ${1:functionName} = (${2:params}) => {",
      "\t$0",
      "}",
      ""
    ],
    "description": "Export named function in ES7 syntax"
  },
  "exportDefaultFunction": {
    "prefix": "edf",
    "body": ["export default (${1:params}) => {", "\t$0", "}", ""],
    "description": "Export default function in ES7 syntax"
  },
  "exportDefaultNamedFunction": {
    "prefix": "ednf",
    "body": [
      "export default const ${1:functionName} = (${2:params}) => {",
      "\t$0",
      "}",
      ""
    ],
    "description": "Export default named function in ES7 syntax"
  },

  "namedFunction": {
    "prefix": "nfn",
    "body": ["const ${1:name} = (${2:params}) => {", "\t${3}", "}", ""],
    "description": "Creates a named function in ES7 syntax"
  },

  "forEach": {
    "prefix": "fre",
    "body": ["forEach(${1:array},${2:currentItem} => {", "\t${0}", "})", ""],
    "description": "Creates a forEach statement in ES7 syntax"
  },

  "forOf": {
    "prefix": "fof",
    "body": ["for(let ${1:item} of ${2:object}) {", "\t${0}", "}", ""],
    "description": "Iterating over property names of iterable objects"
  },

  "forIn": {
    "prefix": "fin",
    "body": ["for(let ${1:item} in ${2:object}) {", "\t${0}", "}", ""],
    "description": "Iterating over property values of iterable objects"
  },

  "destructingObject": {
    "prefix": "dob",
    "body": "const {${2:propertyName}} = ${1:objectToDestruct}",
    "description": "Creates and assigns a local variable using object destructing"
  },
  "destructingArray": {
    "prefix": "dar",
    "body": "const [${2:propertyName}] = ${1:arrayToDestruct}",
    "description": "Creates and assigns a local variable using array destructing"
  },
  "setInterval": {
    "prefix": "sti",
    "body": ["setInterval(() => {", "\t${2}", "}, ${0:intervalInms})", ""],
    "description": "Executes the given function at specified intervals in ES7 syntax"
  },
  "setTimeOut": {
    "prefix": "sto",
    "body": ["setTimeout(() => {", "\t${2}", "}, ${1:delayInms})", ""],
    "description": "Executes the given function after the specified delay in ES7 syntax"
  },
  "promise": {
    "prefix": "prom",
    "body": ["return new Promise((resolve, reject) => {", "\t${1}", "})", ""],
    "description": "Creates and returns a new Promise in the standard ES7 syntax"
  },

  "consoleAssert": {
    "prefix": "cas",
    "body": "console.assert(${1:expression}, ${2:object})",
    "description": "If the specified expression is false, the message is written to the console along with a stack trace"
  },
  "consoleClear": {
    "prefix": "ccl",
    "body": "console.clear()",
    "description": "Clears the console"
  },
  "consoleCount": {
    "prefix": "cco",
    "body": "console.count(${1:label})",
    "description": "Writes the the number of times that count() has been invoked at the same line and with the same label"
  },
  "consoleDir": {
    "prefix": "cdi",
    "body": "console.dir(${1:object})",
    "description": "Prints a JavaScript representation of the specified object"
  },
  "consoleError": {
    "prefix": "cer",
    "body": "console.error(${1:object})",
    "description": "Displays a message in the console and also includes a stack trace from where the method was called"
  },
  "consoleGroup": {
    "prefix": "cgr",
    "body": "console.group(\"${1:label}\")",
    "description": "Groups and indents all following output by an additional level, until console.groupEnd() is called."
  },
  "consoleGroupEnd": {
    "prefix": "cge",
    "body": "console.groupEnd()",
    "description": "Closes out the corresponding console.group()."
  },
  "consoleLog": {
    "prefix": "clg",
    "body": "console.log(${1:object})",
    "description": "Displays a message in the console"
  },
  "consoleTrace": {
    "prefix": "ctr",
    "body": "console.trace(${1:object})",
    "description": "Prints a stack trace from the point where the method was called"
  },
  "consoleLogObject": {
    "prefix": "clo",
    "body": "console.log(`${1:object}`, ${1:object})",
    "description": "Logs property with name."
  },
  "consoleLogJson": {
    "prefix": "clj",
    "body": "console.log(`${1:object}`, JSON.stringify(${1:object}, null, 2))",
    "description": "Logs stringified JSON property with name."
  },
  "consoleTime": {
    "prefix": "ctm",
    "body": "console.time(`${1:object}`)",
    "description": "Console time wrapper"
  },
  "consoleTimeEnd": {
    "prefix": "cte",
    "body": "console.timeEnd(`${1:object}`)",
    "description": "Console time end wrapper"
  },
  "consoleWarn": {
    "prefix": "cwa",
    "body": "console.warn(${1:object})",
    "description": "Displays a message in the console but also displays a yellow warning icon along with the logged message"
  },
  "consoleInfo": {
    "prefix": "cin",
    "body": "console.info(${1:object})",
    "description": "Displays a message in the console but also displays a blue information icon along with the logged message"
  },

  "import React": {
    "prefix": "imr",
    "body": ["import React from 'react'", ""]
  },

  "reactClassComponent": {
    "prefix": "rcc",
    "body": [
      "import React, { Component } from 'react'",
      "",
      "export default class ${1:${TM_FILENAME_BASE}} extends Component {",
      "\trender() {",
      "\t\treturn (",
      "\t\t\t<div>",
      "\t\t\t\t$0",
      "\t\t\t</div>",
      "\t\t)",
      "\t}",
      "}",
      ""
    ],
    "description": "Creates a React component class with ES7 module system"
  },

  "reactClassExportComponent": {
    "prefix": "rce",
    "body": [
      "import React, { Component } from 'react'",
      "",
      "export class ${1:${TM_FILENAME_BASE}} extends Component {",
      "\trender() {",
      "\t\treturn (",
      "\t\t\t<div>",
      "\t\t\t\t$0",
      "\t\t\t</div>",
      "\t\t)",
      "\t}",
      "}",
      "",
      "export default ${1:${TM_FILENAME_BASE}}",
      ""
    ],
    "description": "Creates a React component class with ES7 module system"
  },

  "reactFunctionalComponent": {
    "prefix": "rfc",
    "body": [
      "import React from 'react'",
      "",
      "export default function ${1:${TM_FILENAME_BASE}}() {",
      "\treturn (",
      "\t\t<div>",
      "\t\t\t$0",
      "\t\t</div>",
      "\t)",
      "}",
      ""
    ],
    "description": "Creates a React Functional Component with ES7 module system"
  },

  "createContext": {
    "prefix": "rcontext",
    "body": ["const ${1:contextName} = React.createContext()", ""],
    "description": "Create React context"
  },

  "createRef": {
    "prefix": "cref",
    "body": ["this.${1:refName}Ref = React.createRef()", ""],
    "description": "Create ref statement used inside constructor"
  },

  "forwardRef": {
    "prefix": "fref",
    "body": ["const ref = React.createRef()", ""],
    "description": "Forward ref statement used inside component"
  },

  "reactNativeComponent": {
    "prefix": "rnc",
    "body": [
      "import React, { Component } from 'react'",
      "import { Text, View } from 'react-native'",
      "",
      "export default class ${1:${TM_FILENAME_BASE}} extends Component {",
      "\trender() {",
      "\t\treturn (",
      "\t\t\t<View>",
      "\t\t\t\t<Text> ${2:textInComponent} </Text>",
      "\t\t\t</View>",
      "\t\t)",
      "\t}",
      "}",
      ""
    ]
  },
  "reactNativeComponentWithStyles": {
    "prefix": "rncs",
    "body": [
      "import React, { Component } from 'react'",
      "import { Text, StyleSheet, View } from 'react-native'",
      "",
      "export default class ${1:${TM_FILENAME_BASE}} extends Component {",
      "\trender() {",
      "\t\treturn (",
      "\t\t\t<View>",
      "\t\t\t\t<Text> ${2:textInComponent} </Text>",
      "\t\t\t</View>",
      "\t\t)",
      "\t}",
      "}",
      "",
      "const styles = StyleSheet.create({})",
      ""
    ]
  },
  "reactNativeComponentExport": {
    "prefix": "rnce",
    "body": [
      "import React, { Component } from 'react'",
      "import { Text, View } from 'react-native'",
      "",
      "export class ${1:${TM_FILENAME_BASE}} extends Component {",
      "\trender() {",
      "\t\treturn (",
      "\t\t\t<View>",
      "\t\t\t\t<Text> ${2:textInComponent} </Text>",
      "\t\t\t</View>",
      "\t\t)",
      "\t}",
      "}",
      "",
      "export default ${1:${TM_FILENAME_BASE}}",
      ""
    ]
  },
  "reactNativePureComponent": {
    "prefix": "rnpc",
    "body": [
      "import React, { PureComponent } from 'react'",
      "import { Text, View } from 'react-native'",
      "",
      "export default class ${1:${TM_FILENAME_BASE}} extends PureComponent {",
      "\trender() {",
      "\t\treturn (",
      "\t\t\t<View>",
      "\t\t\t\t<Text> ${2:textInComponent} </Text>",
      "\t\t\t</View>",
      "\t\t)",
      "\t}",
      "}",
      ""
    ]
  },
  "reactNativePureComponentExport": {
    "prefix": "rnpce",
    "body": [
      "import React, { PureComponent } from 'react'",
      "import { Text, View } from 'react-native'",
      "",
      "export class ${1:${TM_FILENAME_BASE}} extends PureComponent {",
      "\trender() {",
      "\t\treturn (",
      "\t\t\t<View>",
      "\t\t\t\t<Text> ${2:textInComponent} </Text>",
      "\t\t\t</View>",
      "\t\t)",
      "\t}",
      "}",
      "",
      "export default ${1:${TM_FILENAME_BASE}}",
      ""
    ]
  },
  "reactNativeClassComponentRedux": {
    "prefix": "rncredux",
    "body": [
      "import React, { Component } from 'react'",
      "import { View, Text } from 'react-native'",
      "import PropTypes from 'prop-types'",
      "import { connect } from 'react-redux'",
      "",
      "export class ${1:${TM_FILENAME_BASE}} extends Component {",
      "\tstatic propTypes = {",
      "\t\t${2:prop}: ${3:PropTypes}",
      "\t}",
      "",
      "\trender() {",
      "\t\treturn (",
      "\t\t\t<View>",
      "\t\t\t\t<Text> ${2:textInComponent} </Text>",
      "\t\t\t</View>",
      "\t\t)",
      "\t}",
      "}",
      "",
      "const mapStateToProps = (state) => ({",
      "\t",
      "})",
      "",
      "const mapDispatchToProps = {",
      "\t",
      "}",
      "",
      "export default connect(mapStateToProps, mapDispatchToProps)(${1:${TM_FILENAME_BASE}})",
      ""
    ],
    "description": "Creates a React Native component class with PropTypes with connected redux and ES7 module system"
  },

  "reactNativeFunctionalExportComponent": {
    "prefix": "rnfe",
    "body": [
      "import React from 'react'",
      "import { View, Text } from 'react-native'",
      "",
      "const ${1:${TM_FILENAME_BASE}} = () => {",
      "\treturn (",
      "\t\t<View>",
      "\t\t\t<Text>$0</Text>",
      "\t\t</View>",
      "\t)",
      "}",
      "",
      "export default ${1:${TM_FILENAME_BASE}}",
      ""
    ]
  },

  "reactNativeFunctionalExportComponentWithStyles": {
    "prefix": "rnfes",
    "body": [
      "import React from 'react'",
      "import { StyleSheet, Text, View } from 'react-native'",
      "",
      "const ${1:${TM_FILENAME_BASE}} = () => {",
      "\treturn (",
      "\t\t<View>",
      "\t\t\t<Text>$0</Text>",
      "\t\t</View>",
      "\t)",
      "}",
      "",
      "export default ${1:${TM_FILENAME_BASE}}",
      "",
      "const styles = StyleSheet.create({})",
      ""
    ]
  },

  "reactNativeImport": {
    "prefix": "imrn",
    "body": "import { ${1:moduleName} } from 'react-native'"
  },

  "reactNativeStyles": {
    "prefix": "rnstyle",
    "body": ["const styles = StyleSheet.create({", "\t${1:style}", "})", ""]
  },

  "Comment Big Block": {
    "prefix": "cmmb",
    "body": ["/**", " * ${0}", " */"]
  },

  "graphQLForComponent": {
    "prefix": "graphql",
    "body": ["import { compose, graphql } from 'react-apollo'", ""]
  },

  "exportGraphQL": {
    "prefix": "expgql",
    "body": [
      "export default compose(",
      "\tgraphql(${1:queryOrMutation}, { name: ${2:name} }),",
      ")(${1:${TM_FILENAME_BASE}})"
    ]
  },
  "graphQlFragment": {
    "prefix": "gqlfrag",
    "body": [
      "export const F_INVENTORY_LOG = gql`",
      "\tfragment F_INVENTORY_LOG on InventoryLogs {",
      "\t\t$1",
      "\t}",
      "`;"
    ]
  },

  "useState": {
    "prefix": "useState",
    "body": [
      "const [${1:state}, set${1/(.*)/${1:/capitalize}/}] = useState(${2:initialState})"
    ]
  },

  "useEffect": {
    "prefix": "useEffect",
    "body": [
      "useEffect(() => {",
      "\t${1:effect}",
      "\treturn () => {",
      "\t\t${2:cleanup}",
      "\t}",
      "}, [${3:input}])"
    ]
  },

  "useContext": {
    "prefix": "useContext",
    "body": ["const ${1:context} = useContext(${2:contextValue})"]
  },

  "useReducer": {
    "prefix": "useReducer",
    "body": [
      "const [state, dispatch] = useReducer(${1:reducer}, ${2:initialState}, ${3:init})"
    ]
  },

  "useCallback": {
    "prefix": "useCallback",
    "body": [
      "useCallback(",
      "\t() => {",
      "\t\t${1:callback}",
      "\t},",
      "\t[${2:input}],",
      ")"
    ]
  },

  "useMemo": {
    "prefix": "useMemo",
    "body": ["useMemo(() => ${1:function}, ${2:input})"]
  },

  "useRef": {
    "prefix": "useRef",
    "body": ["const ${1:ref} = useRef(${2:initialValue})"]
  },

  "useImperativeHandle": {
    "prefix": "useImperativeHandle",
    "body": [
      "useImperativeHandle(",
      "\t${1:ref},",
      "\t() => {",
      "\t\t${2:handler}",
      "\t},",
      "\t[${3:input}],",
      ")"
    ]
  },

  "useDebugValue": {
    "prefix": "useDebugValue",
    "body": ["useDebugValue(${1:value})"]
  },

  "useLayoutEffect": {
    "prefix": "useLayoutEffect",
    "body": [
      "useLayoutEffect(() => {",
      "\t${1:effect}",
      "\treturn () => {",
      "\t\t${2:cleanup}",
      "\t};",
      "}, [${3:input}])"
    ]
  },

  "useSelector": {
    "prefix": "useSelector",
    "body": ["const ${1:state} = useSelector(state => state.${1:state})"]
  },

  "useDispatch": {
    "prefix": "useDispatch",
    "body": ["const dispatch = useDispatch()"]
  },

  "yupObjectSchema": {
    "prefix": "yupObjectSchema",
    "body": [
      "export const ${0:schema} = Yup.object().shape({",
      "\t${1:field}: Yup.string().required('Required')",
      "});"
    ]
  },

  "yupShapeSchema": {
    "prefix": "yupShapeSchema",
    "body": ["export const ${1:schema} = Yup.lazy((value) => {", "\t", "});"]
  },

  "divTag": {
    "prefix": "div",
    "body": ["<div className='${1}'>{${0}}</div>"]
  },

  "textTag": {
    "prefix": "text",
    "body": ["<text className='${1}'>{${0}}</text>"]
  }
}
