{
  "typeScriptReactFunctionalExportComponent": {
    "prefix": "rfce",
    "body": [
      "import React from 'react'",
      "",
      "interface I${1/(.*)/${1:/capitalize}/} {",
      "\t",
      "}",
      "",
      "function ${1:${TM_FILENAME_BASE}}({}: I${1/(.*)/${1:/capitalize}/}) {",
      "\treturn (",
      "\t\t<div>",
      "\t\t\t$0",
      "\t\t</div>",
      "\t)",
      "}",
      "",
      "export default ${1:${TM_FILENAME_BASE}}",
      ""
    ],
    "description": "Creates a React Functional Component with ES7 module system and TypeScript interface"
  },

  "typeScriptReactArrowFunctionComponent": {
    "prefix": "rafc",
    "body": [
      "import React from 'react'",
      "",
      "interface Props {",
      "\t",
      "}",
      "",
      "export const ${1:${TM_FILENAME_BASE}} = (props: Props) => {",
      "\treturn (",
      "\t\t<div>",
      "\t\t\t$0",
      "\t\t</div>",
      "\t)",
      "}",
      ""
    ],
    "description": "Creates a React Arrow Function Component with ES7 module system and TypeScript interface"
  },

  "typescriptReactNativeArrowFunctionComponent": {
    "prefix": "rnf",
    "body": [
      "import React from 'react'",
      "import { View, Text } from 'react-native'",
      "",
      "interface Props {",
      "\t",
      "}",
      "",
      "const ${1:${TM_FILENAME_BASE}} = (props: Props) => {",
      "\treturn (",
      "\t\t<View>",
      "\t\t\t<Text>$0</Text>",
      "\t\t</View>",
      "\t)",
      "}",
      "",
      "export default ${1:${TM_FILENAME_BASE}}",
      ""
    ],
    "description": "Creates a React Native Arrow Function Component with ES7 module system and TypeScript interface"
  },
  "typescriptReactNativeArrowFunctionComponentNamedProps": {
    "prefix": "rnfi",
    "body": [
      "import React from 'react'",
      "import { View } from 'react-native'",
      "",
      "interface ${1:${TM_FILENAME_BASE}}Props {",
      "\t",
      "}",
      "",
      "const ${1:${TM_FILENAME_BASE}}: React.FC<${1:${TM_FILENAME_BASE}}Props> = (props) => {",
      "\treturn (",
      "\t\t<View>",
      "\t\t\t$0",
      "\t\t</View>",
      "\t)",
      "}",
      "",
      "export default ${1:${TM_FILENAME_BASE}}",
      ""
    ],
    "description": "Creates a React Native Arrow Function Component with ES7 module system and named TypeScript interface"
  },
  "typescriptReactNativeArrowFunctionComponentWithStyles": {
    "prefix": "rnfs",
    "body": [
      "import React from 'react'",
      "import { StyleSheet, Text, View } from 'react-native'",
      "",
      "interface Props {",
      "\t",
      "}",
      "",
      "const ${1:${TM_FILENAME_BASE}} = (props: Props) => {",
      "\treturn (",
      "\t\t<View>",
      "\t\t\t<Text>$0</Text>",
      "\t\t</View>",
      "\t)",
      "}",
      "",
      "export default ${1:${TM_FILENAME_BASE}}",
      "",
      "const styles = StyleSheet.create({})",
      ""
    ],
    "description": "Creates a React Native Arrow Function Component with ES7 module system, TypeScript interface and StyleSheet"
  },
  "Export interface": {
    "prefix": "interface",
    "body": ["export interface ${1:I${TM_FILENAME_BASE}} {$0}"]
  },

  "formikHook": {
    "prefix": "useFormik",
    "body": [
      "const ${1:form} = useFormik<any>({",
      "\tinitialValues: {} as any",
      "\tvalidateOnChange: false,",
      "\tvalidateOnBlur: false,",
      "\tvalidationSchema: ${2:schema},",
      "\tonSubmit: (values) => {},",
      "/>"
    ],
    "description": "Creates useFormik "
  },

  "graphQLQuery": {
    "prefix": "gqlquery",
    "body": [
      "${1:queryFuncName}: (${2: params}:any) =>",
      "\tAPI.query({",
      "\t\tquery: gql`",
      "\t\t\tquery ${3:queryName}($${4:queryParam}:${5:queryParamType}) {",
      "\t\t\t\t${3:queryName}(${4:queryParam}: $${4:queryParam}) {",
      "\t\t\t\t\t$6",
      "\t\t\t\t}",
      "\t\t\t}",
      "\t\t`,",
      "\t\tvariables: { ${2: params} }",
      "\t}),"
    ]
  },

  "graphQLMutation": {
    "prefix": "gqlmutate",
    "body": [
      "${1:mutationFuncName}: (${2: params}:any) =>",
      "\tAPI.mutate({",
      "\tmutation: gql`",
      "\t\tmutation ${3:mutationName}($${4:param}:${5:paramType}) {",
      "\t\t\t\t${3:mutationName}(${4:param}: $${4:param}) {",
      "\t\t\t\t\t$6",
      "\t\t\t\t}",
      "\t\t\t}",
      "\t\t`,",
      "\t\tvariables: { ${2: params} }",
      "\t}),"
    ]
  },

  "graphQLDelete": {
    "prefix": "gqldelete",
    "body": ["delete: (id: string) => API.delete('$1', id),"]
  }
}
